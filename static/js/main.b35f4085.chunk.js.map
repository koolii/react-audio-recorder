{"version":3,"sources":["logo.svg","components/Recording.tsx","pages/Top.tsx","components/UserMediaDevices.tsx","pages/Samples.tsx","components/Router/router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RecordState","Top","className","src","logo","alt","to","UserMediaDevices","resultGetUserMediaAPI","navigator","mediaDevices","getUserMedia","resultAudioContext","window","AudioContext","webkitAudioContext","userAgent","Recording","useState","Stop","recordStatus","setRecordStatus","showPreview","setShowPreview","audioEl","useRef","Record","Status","Mic","record","Start","onStop","e","filename","moment","format","console","log","url","URL","webkitURL","current","createObjectURL","blob","strokeColor","backgroundColor","mimeType","type","name","value","onClick","style","display","Audio","ref","controls","styled","div","ReactMic","audio","Samples","AppRouter","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b35f4085.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from \"react\";\nimport moment from 'moment';\nimport styled from \"styled-components/macro\";\nimport { ReactMic } from '@cleandersonlobo/react-mic';\n\nexport enum RecordState {\n  Stop,\n  Start,\n}\n\ninterface MicSaveEventProps {\n  blob: Blob;\n  startTime: Date;\n  stopTime: Date;\n  options: any;\n  blobURL: string;\n}\n\nexport const Recording: React.FC = () => {\n  const [recordStatus, setRecordStatus] = useState(RecordState.Stop);\n  const [showPreview, setShowPreview] = useState(false);\n  const audioEl = useRef<HTMLAudioElement | null>(null);\n\n  // useRefでAudioタグを取得しておく (WebAudio API)\n\n  const startRecording = () => {\n    console.log('start')\n    setRecordStatus(RecordState.Start);\n  }\n\n  const stopRecording = () => {\n    console.log('stop')\n    setRecordStatus(RecordState.Stop);\n  };\n\n  const previewAudio = (e: MicSaveEventProps) => {\n    const filename = moment().format(\"YYYYMMDDHHmmss\");\n    console.log(filename);\n\n    // e.blob\n    console.log(e);\n\n    const url = window.URL || window.webkitURL;\n\n    if (audioEl.current) {\n      console.log('attach audio BlobURL to DOM');\n      audioEl.current.src = url.createObjectURL(e.blob);\n    } else {\n      console.log(\"can not attach Blob because of audioEl is null\");\n    }\n\n    setShowPreview(true);\n  };\n\n\n  return (\n    <Record>\n      <Status>\n        <Mic\n          record={recordStatus === RecordState.Start}\n          onStop={previewAudio}\n          strokeColor=\"white\"\n          backgroundColor=\"#f14c00\"\n          mimeType=\"audio/wav\"\n        />\n      </Status>\n      <div>再生時間</div>\n      <input type=\"button\" name=\"start\" value=\"start Recording\" onClick={startRecording} />\n      <input type=\"button\" name=\"stop\" value=\"stop Recording\" onClick={stopRecording} />\n\n      {/* {showPreview && ( */}\n      <div\n        style={{ display: showPreview ? '' : 'none' }}\n      >\n        <Audio ref={audioEl} controls></Audio>\n      </div>\n      {/* )} */}\n    </Record>\n  )\n}\n\n\nconst styles = {\n  recordTextColor: \"#FFF\",\n};\n\nconst Record = styled.div`\n  text-align: center;\n  width: 200px;\n  height: 160px;\n  padding: 20px;\n  border-radius: 4px;\n  background-color: #f14c00;\n  color: ${styles.recordTextColor};\n`;\n\nconst Status = styled.div`\n  color: white;\n`;\n\nconst Mic = styled(ReactMic)`\n  width: 100%;\n`;\n\nconst Audio = styled.audio`\n  width: 100%;\n  margin: 10px 0;\n`;","import React from \"react\";\nimport logo from '../logo.svg';\nimport { Link } from 'react-router-dom';\n\nexport const Top: React.FC = () => {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1>React Audio Recorder</h1>\n        <h2>Target</h2>\n        <span>iOS/Android</span>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Link to=\"/react-audio-recorder/samples\">\n          CLICK HERE\n        </Link>\n      </header>\n    </div>\n  )\n}","import React from 'react';\n\nexport const UserMediaDevices: React.FC = () => {\n  const resultGetUserMediaAPI = !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n  const resultAudioContext = !!window.AudioContext || !!(window as any).webkitAudioContext;\n\n  return (\n    <ul>\n      <li><b>User-Agent:</b> {navigator.userAgent}</li>\n      <li><b>getUserMedia API:</b> {resultGetUserMediaAPI ? \"yes\" : \"no\"}</li>\n      <li><b>AudioContext:</b> {resultAudioContext ? \"yes\" : \"no\"}</li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { UserMediaDevices } from '../components/UserMediaDevices';\nimport { Recording } from '../components/Recording';\n\nexport const Samples: React.FC = () => {\n  const [clickedReactMic, setClickedReactMid] = useState(false);\n  const handleClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    setClickedReactMid(true);\n    console.log(\"clicked\");\n  };\n\n  return (\n    <div>\n      <div>\n        <UserMediaDevices />\n      </div>\n      <div>\n        <h2>1. cleandersonlobo/react-mic</h2>\n        <Recording />\n        {/* {!clickedReactMic ? (\n          <button onClick={(e) => handleClick(e)}>\n            start recording\n          </button>\n        ) : (\n          <button onClick={() => setClickedReactMid(false)}>\n            stop\n          </button>\n        )} */}\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { Top } from '../../pages/Top';\nimport { Samples } from '../../pages/Samples';\n// うまく動かない\n// import { GithubRouter } from './GithubRouter';\n\nexport const AppRouter: React.FC = () => {\n  // const prefix = \"/react-audio-recorder\";\n  const prefix = \"\";\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={`${prefix}/`}>\n          <Route path={`${prefix}/top`} />\n        </Route>\n        <Route exact path={`${prefix}/top`} component={Top} />\n        <Route exact path={`${prefix}/samples`} component={Samples} />\n        <Route path={'*'}>\n          <Redirect to=\"/react-audio-recorder/top\" />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}","import React from 'react';\nimport { AppRouter } from './components/Router/router';\nimport './App.css';\n\nfunction App() {\n  return (\n    <AppRouter />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}