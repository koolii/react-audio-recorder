{"version":3,"sources":["logo.svg","components/Recording.tsx","components/UserMediaDevices.tsx","components/VoiceRecorder.tsx","pages/Samples.tsx","pages/Top.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RecordState","UserMediaDevices","resultGetUserMediaAPI","navigator","mediaDevices","getUserMedia","resultAudioContext","window","AudioContext","webkitAudioContext","userAgent","Recording","useState","Stop","recordStatus","setRecordStatus","showPreview","setShowPreview","audioEl","useRef","Record","Status","Mic","record","Start","onStop","e","filename","moment","format","console","log","url","URL","webkitURL","current","src","createObjectURL","blob","strokeColor","backgroundColor","mimeType","type","name","value","onClick","style","display","Audio","ref","controls","styled","div","ReactMic","audio","RecordRTC","StereoAudioRecorder","VoiceRecorder","isSafari","useMemo","test","microphone","recorder","resultEl","recording","setRecording","logArray","updateLog","useCallback","newState","tmp","slice","getMicPermission","a","alert","Error","echoCancellation","mic","startRec","preventDefault","muted","srcObject","options","numberOfAudioChannels","checkForInactiveTracks","bufferSize","recorderType","destroy","useEffect","startRecording","state","stopRecording","getBlob","Container","Control","Button","HiddenAudio","map","idx","key","input","attrs","Samples","Top","className","logo","alt","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60d45180.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from \"react\";\nimport moment from 'moment';\nimport styled from \"styled-components/macro\";\nimport { ReactMic } from '@cleandersonlobo/react-mic';\n\nexport enum RecordState {\n  Stop,\n  Start,\n}\n\ninterface MicSaveEventProps {\n  blob: Blob;\n  startTime: Date;\n  stopTime: Date;\n  options: any;\n  blobURL: string;\n}\n\nexport const Recording: React.FC = () => {\n  const [recordStatus, setRecordStatus] = useState(RecordState.Stop);\n  const [showPreview, setShowPreview] = useState(false);\n  const audioEl = useRef<HTMLAudioElement | null>(null);\n\n  // useRefでAudioタグを取得しておく (WebAudio API)\n\n  const startRecording = () => {\n    console.log('start')\n    setRecordStatus(RecordState.Start);\n  }\n\n  const stopRecording = () => {\n    console.log('stop')\n    setRecordStatus(RecordState.Stop);\n  };\n\n  const previewAudio = (e: MicSaveEventProps) => {\n    const filename = moment().format(\"YYYYMMDDHHmmss\");\n    console.log(filename);\n\n    // e.blob\n    console.log(e);\n\n    const url = window.URL || window.webkitURL;\n\n    if (audioEl.current) {\n      console.log('attach audio BlobURL to DOM');\n      audioEl.current.src = url.createObjectURL(e.blob);\n    } else {\n      console.log(\"can not attach Blob because of audioEl is null\");\n    }\n\n    setShowPreview(true);\n  };\n\n\n  return (\n    <Record>\n      <Status>\n        <Mic\n          record={recordStatus === RecordState.Start}\n          onStop={previewAudio}\n          strokeColor=\"white\"\n          backgroundColor=\"#f14c00\"\n          mimeType=\"audio/wav\"\n        />\n      </Status>\n      <div>再生時間</div>\n      <input type=\"button\" name=\"start\" value=\"start Recording\" onClick={startRecording} />\n      <input type=\"button\" name=\"stop\" value=\"stop Recording\" onClick={stopRecording} />\n\n      {/* {showPreview && ( */}\n      <div\n        style={{ display: showPreview ? '' : 'none' }}\n      >\n        <Audio ref={audioEl} controls></Audio>\n      </div>\n      {/* )} */}\n    </Record>\n  )\n}\n\n\nconst styles = {\n  recordTextColor: \"#FFF\",\n};\n\nconst Record = styled.div`\n  text-align: center;\n  width: 200px;\n  height: 160px;\n  padding: 20px;\n  border-radius: 4px;\n  background-color: #f14c00;\n  color: ${styles.recordTextColor};\n`;\n\nconst Status = styled.div`\n  color: white;\n`;\n\nconst Mic = styled(ReactMic)`\n  width: 100%;\n`;\n\nconst Audio = styled.audio`\n  width: 100%;\n  margin: 10px 0;\n`;","import React from 'react';\n\nexport const UserMediaDevices: React.FC = () => {\n  const resultGetUserMediaAPI = !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n  const resultAudioContext = !!window.AudioContext || !!(window as any).webkitAudioContext;\n\n  return (\n    <ul>\n      <li><b>User-Agent:</b> {navigator.userAgent}</li>\n      <li><b>getUserMedia API:</b> {resultGetUserMediaAPI ? \"yes\" : \"no\"}</li>\n      <li><b>AudioContext:</b> {resultAudioContext ? \"yes\" : \"no\"}</li>\n    </ul>\n  );\n};\n","import React, { useMemo, useRef, useState, useEffect, useCallback } from 'react';\nimport RecordRTC, { StereoAudioRecorder } from 'recordrtc';\nimport styled from 'styled-components/macro';\n\nconsole.log(RecordRTC);\nconsole.log(StereoAudioRecorder);\n\ninterface Recorder {\n  startRecording();\n  stopRecording(callback: Function);\n  getBlob();\n  getDataURL();\n  destroy();\n  state: string;\n}\n\nexport const VoiceRecorder: React.FC = () => {\n  const isSafari = useMemo(() => {\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  }, [])\n  const microphone = useRef<MediaStream | null>(null);\n  const recorder = useRef<Recorder | null>(null);\n  const audioEl = useRef<HTMLAudioElement | null>(null);\n  const resultEl = useRef<HTMLAudioElement | null>(null);\n  const [recording, setRecording] = useState<boolean>(false);\n\n  // const logArray = useRef<string[]>([\"\"]);\n  const [logArray, setLogArray] = useState<string[]>([]);\n  const updateLog = useCallback((newState) => {\n    console.log(`New Log: ${newState}`);\n    // logArray.current.push(newState);\n    // setLogMsg(`${logMsg}\\n${newState}`);\n    const tmp = logArray.slice();\n    console.log(tmp);\n    // tmp.push(newState);\n    // setLogArray(tmp);\n  }, [logArray]);\n\n  const getMicPermission = async () => {\n    if (microphone.current) {\n      return microphone.current;\n    }\n\n    if (!navigator || !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      alert(\"This browser doesn't supports getUserMedia API.\");\n      if (!!navigator.getUserMedia) {\n        updateLog('This browser uses deprecated getUserMedia API.');\n      }\n\n      throw new Error(\"can't use VoiceRecorder Component\");\n    }\n\n    try {\n      const mic = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: false\n        }\n      });\n\n      return mic;\n    } catch (error) {\n      alert('Unable to capture your microphone.');\n      throw error;\n    }\n  }\n\n  const startRec = async (e: React.MouseEvent) => {\n    e.preventDefault();\n\n    if (!microphone.current) {\n      microphone.current = await getMicPermission();\n\n      if (isSafari) {\n        startRec(e);\n        return;\n      }\n    }\n\n    if (audioEl.current) {\n      audioEl.current.muted = true;\n      audioEl.current.srcObject = microphone.current;\n    }\n\n    const options = {\n      type: 'audio',\n      numberOfAudioChannels: 2,\n      checkForInactiveTracks: true,\n      bufferSize: 16384,\n      recorderType: StereoAudioRecorder,\n    };\n\n    // if (isSafari) {\n    //   options.recorderType = StereoAudioRecorder;\n    // }\n\n    if (recorder.current) {\n      recorder.current.destroy();\n      recorder.current = null;\n    }\n\n    recorder.current = RecordRTC(microphone.current, options);\n    // recorder.startRecording();\n\n    updateLog(recorder.current);\n\n    if (!recording) {\n      setRecording(true);\n    }\n  };\n  const stopRec = (e: React.MouseEvent) => {\n    e.preventDefault();\n\n    if (recording) {\n      setRecording(false);\n    }\n  }\n\n  useEffect(() => {\n    updateLog(`useEffect recording: ${recording}`);\n    updateLog(`useEffect microphone: ${microphone.current}`);\n    updateLog(`useEffect recorder: ${recorder.current}`);\n    // レコーディング開始\n    if (recording && microphone.current) {\n      updateLog('start recording');\n\n      if (recorder.current) {\n        recorder.current.startRecording();\n      }\n    } else if (!recording && microphone.current && recorder.current && recorder.current.state === 'recording') {\n      updateLog('stop recording');\n\n      if (recorder.current) {\n        recorder.current.stopRecording(() => {\n          updateLog(\"STOP Recording callback\");\n          if (resultEl.current && recorder.current) {\n            const url = URL.createObjectURL(recorder.current.getBlob());\n            updateLog(url);\n            resultEl.current.src = url;\n            updateLog(\"resultEl is ready to play\");\n          }\n        });\n\n        // updateLog(\"recorder is destoying\");\n        // recorder.current.destroy();\n        // recorder.current = null;\n      }\n    } else {\n      updateLog('something wrong');\n    }\n  }, [recording, microphone, recorder, updateLog]);\n\n  // useEffect(() => {\n  //   if (isSafari) {\n  //     alert('create AudioContext instance');\n  //     const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n  //     updateLog(audioContext);\n\n  //     let scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);\n  //     localScriptProcessor = scriptProcessor;\n\n  //     if (audioContext.createMediaStreamDestination) {\n  //       destinationNode = audioContext.createMediaStreamDestination()\n  //     }\n  //     else {\n  //       destinationNode = audioContext.destination\n  //     }\n  //   }\n\n  //   alert('finished creating audioContext instance');\n  // })\n\n  // useEffect(() => {\n  //   if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\n  //     if (typeof (navigator as any).webkitGetUserMedia !== 'undefined') {\n  //       navigator.getUserMedia = (navigator as any).webkitGetUserMedia;\n  //     }\n\n  //     if (typeof (navigator as any).mozGetUserMedia !== 'undefined') {\n  //       navigator.getUserMedia = (navigator as any).mozGetUserMedia;\n  //     }\n  //   }\n\n  //   alert(`navigator.getUserMedia: ${navigator.getUserMedia}`);\n  // }, []);\n\n  updateLog(`This browser is Safari or not: ${isSafari}`);\n\n  return (\n    <Container>\n      <Control>\n        <Button name=\"start\" value=\"START\" onClick={startRec} />\n        <Button name=\"stop\" value=\"STOP\" onClick={stopRec} />\n      </Control>\n      <div>\n        <div >\n          <span>録音が開始されると↓のAudioが有効化されますので、特に再生せずとも録音が開始されています</span>\n          <HiddenAudio ref={audioEl} controls></HiddenAudio>\n        </div>\n        <div>\n          <span>録音した音声は↓から確認できます</span>\n          <Audio ref={resultEl} controls></Audio>\n        </div>\n      </div>\n      <div>\n        {logArray.map((log, idx) => (\n          <li key={idx}>{log}</li>\n        ))}\n      </div>\n    </Container>\n  );\n}\n\n// 本当は align-itemsで 中央寄せにできると思ったが、うまく行かなかったので\n// text-align: centerで代用\nconst Container = styled.div`\n  width: 80%;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #f14c00;\n  margin: 0 auto;\n  padding: 20px;\n  text-align: center;\n  border-radius: 4px;\n`;\n\nconst Control = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst Audio = styled.audio`\n  width: 80%;\n  margin: 10px 0;\n`;\n\nconst Button = styled.input.attrs({ type: 'button' })`\n  width: 30%;\n  height: 30px;\n  background-color: #fff;\n  border-radius: 12px;\n`;\n\nconst HiddenAudio = styled(Audio)`\n  display: none;\n`;","import React from 'react';\nimport { UserMediaDevices } from '../components/UserMediaDevices';\nimport { Recording } from '../components/Recording';\nimport { VoiceRecorder } from '../components/VoiceRecorder';\n\nexport const Samples: React.FC = () => {\n  // const [clickedReactMic, setClickedReactMid] = useState(false);\n  // const handleClick = (e: React.MouseEvent) => {\n  //   e.preventDefault();\n  //   setClickedReactMid(true);\n  //   console.log(\"clicked\");\n  // };\n\n  return (\n    <div>\n      <div>\n        <UserMediaDevices />\n      </div>\n      <div>\n        <h2>1. cleandersonlobo/react-mic</h2>\n        <Recording />\n        {/* {!clickedReactMic ? (\n          <button onClick={(e) => handleClick(e)}>\n            start recording\n          </button>\n        ) : (\n          <button onClick={() => setClickedReactMid(false)}>\n            stop\n          </button>\n        )} */}\n      </div>\n      <div>\n        <h2>VoiceRecorder</h2>\n        <VoiceRecorder />\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport logo from '../logo.svg';\n// import { Link } from 'react-router-dom';\nimport { Samples } from './Samples';\n\nexport const Top: React.FC = () => {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1>React Audio Recorder</h1>\n        <h2>Target</h2>\n        <span>iOS/Android</span>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* <Link to=\"/samples\">\n          CLICK HERE\n        </Link> */}\n\n        <Samples />\n      </header>\n    </div>\n  )\n}","import React from 'react';\n// import { AppRouter } from './components/Router/router';\nimport { Top } from './pages/Top';\nimport './App.css';\n\n// function App() {\n//   return (\n//     <AppRouter />\n//   );\n// }\nfunction App() {\n  return <Top />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}