{"version":3,"sources":["logo.svg","components/Recording.tsx","pages/Top.tsx","components/UserMediaDevices.tsx","components/VoiceRecorder.tsx","pages/Samples.tsx","components/Router/router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RecordState","Top","className","src","logo","alt","to","UserMediaDevices","resultGetUserMediaAPI","navigator","mediaDevices","getUserMedia","resultAudioContext","window","AudioContext","webkitAudioContext","userAgent","Recording","useState","Stop","recordStatus","setRecordStatus","showPreview","setShowPreview","audioEl","useRef","Record","Status","Mic","record","Start","onStop","e","filename","moment","format","console","log","url","URL","webkitURL","current","createObjectURL","blob","strokeColor","backgroundColor","mimeType","type","name","value","onClick","style","display","Audio","ref","controls","styled","div","ReactMic","audio","RecordRTC","StereoAudioRecorder","VoiceRecorder","isSafari","useMemo","test","microphone","recorder","resultEl","recording","setRecording","getMicPermission","a","alert","Error","echoCancellation","mic","startRec","preventDefault","muted","srcObject","options","numberOfAudioChannels","checkForInactiveTracks","bufferSize","recorderType","destroy","useEffect","startRecording","state","stopRecording","getBlob","webkitGetUserMedia","mozGetUserMedia","Container","Control","Button","input","attrs","Samples","AppRouter","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f44812b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef } from \"react\";\nimport moment from 'moment';\nimport styled from \"styled-components/macro\";\nimport { ReactMic } from '@cleandersonlobo/react-mic';\n\nexport enum RecordState {\n  Stop,\n  Start,\n}\n\ninterface MicSaveEventProps {\n  blob: Blob;\n  startTime: Date;\n  stopTime: Date;\n  options: any;\n  blobURL: string;\n}\n\nexport const Recording: React.FC = () => {\n  const [recordStatus, setRecordStatus] = useState(RecordState.Stop);\n  const [showPreview, setShowPreview] = useState(false);\n  const audioEl = useRef<HTMLAudioElement | null>(null);\n\n  // useRefでAudioタグを取得しておく (WebAudio API)\n\n  const startRecording = () => {\n    console.log('start')\n    setRecordStatus(RecordState.Start);\n  }\n\n  const stopRecording = () => {\n    console.log('stop')\n    setRecordStatus(RecordState.Stop);\n  };\n\n  const previewAudio = (e: MicSaveEventProps) => {\n    const filename = moment().format(\"YYYYMMDDHHmmss\");\n    console.log(filename);\n\n    // e.blob\n    console.log(e);\n\n    const url = window.URL || window.webkitURL;\n\n    if (audioEl.current) {\n      console.log('attach audio BlobURL to DOM');\n      audioEl.current.src = url.createObjectURL(e.blob);\n    } else {\n      console.log(\"can not attach Blob because of audioEl is null\");\n    }\n\n    setShowPreview(true);\n  };\n\n\n  return (\n    <Record>\n      <Status>\n        <Mic\n          record={recordStatus === RecordState.Start}\n          onStop={previewAudio}\n          strokeColor=\"white\"\n          backgroundColor=\"#f14c00\"\n          mimeType=\"audio/wav\"\n        />\n      </Status>\n      <div>再生時間</div>\n      <input type=\"button\" name=\"start\" value=\"start Recording\" onClick={startRecording} />\n      <input type=\"button\" name=\"stop\" value=\"stop Recording\" onClick={stopRecording} />\n\n      {/* {showPreview && ( */}\n      <div\n        style={{ display: showPreview ? '' : 'none' }}\n      >\n        <Audio ref={audioEl} controls></Audio>\n      </div>\n      {/* )} */}\n    </Record>\n  )\n}\n\n\nconst styles = {\n  recordTextColor: \"#FFF\",\n};\n\nconst Record = styled.div`\n  text-align: center;\n  width: 200px;\n  height: 160px;\n  padding: 20px;\n  border-radius: 4px;\n  background-color: #f14c00;\n  color: ${styles.recordTextColor};\n`;\n\nconst Status = styled.div`\n  color: white;\n`;\n\nconst Mic = styled(ReactMic)`\n  width: 100%;\n`;\n\nconst Audio = styled.audio`\n  width: 100%;\n  margin: 10px 0;\n`;","import React from \"react\";\nimport logo from '../logo.svg';\nimport { Link } from 'react-router-dom';\n\nexport const Top: React.FC = () => {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1>React Audio Recorder</h1>\n        <h2>Target</h2>\n        <span>iOS/Android</span>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Link to=\"/samples\">\n          CLICK HERE\n        </Link>\n      </header>\n    </div>\n  )\n}","import React from 'react';\n\nexport const UserMediaDevices: React.FC = () => {\n  const resultGetUserMediaAPI = !!(navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\n  const resultAudioContext = !!window.AudioContext || !!(window as any).webkitAudioContext;\n\n  return (\n    <ul>\n      <li><b>User-Agent:</b> {navigator.userAgent}</li>\n      <li><b>getUserMedia API:</b> {resultGetUserMediaAPI ? \"yes\" : \"no\"}</li>\n      <li><b>AudioContext:</b> {resultAudioContext ? \"yes\" : \"no\"}</li>\n    </ul>\n  );\n};\n","import React, { useMemo, useRef, useState, useEffect } from 'react';\nimport RecordRTC, { StereoAudioRecorder } from 'recordrtc';\nimport styled from 'styled-components/macro';\n\nconsole.log(RecordRTC);\nconsole.log(StereoAudioRecorder);\n\ninterface Recorder {\n  startRecording();\n  stopRecording(callback: Function);\n  getBlob();\n  getDataURL();\n  destroy();\n  state: string;\n}\n\nexport const VoiceRecorder: React.FC = () => {\n  const isSafari = useMemo(() => {\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  }, [])\n  const microphone = useRef<MediaStream | null>(null);\n  const recorder = useRef<Recorder | null>(null);\n  const audioEl = useRef<HTMLAudioElement | null>(null);\n  const resultEl = useRef<HTMLAudioElement | null>(null);\n  const [recording, setRecording] = useState<boolean>(false);\n\n  const getMicPermission = async () => {\n    if (microphone.current) {\n      return microphone.current;\n    }\n\n    alert(navigator);\n    alert(navigator.getUserMedia);\n    alert(navigator.mediaDevices);\n    alert(navigator.mediaDevices.getUserMedia);\n\n    if (!navigator || !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n      alert(\"This browser doesn't supports getUserMedia API.\");\n      if (!!navigator.getUserMedia) {\n        console.log('This browser uses deprecated getUserMedia API.');\n      }\n\n      throw new Error(\"can't use VoiceRecorder Component\");\n    }\n\n    try {\n      const mic = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: false\n        }\n      });\n\n      return mic;\n    } catch (error) {\n      alert('Unable to capture your microphone.');\n      throw error;\n    }\n  }\n\n  const startRec = async (e: React.MouseEvent) => {\n    e.preventDefault();\n\n    if (!microphone.current) {\n      microphone.current = await getMicPermission();\n\n      if (isSafari) {\n        alert('Please click startRecording button again. First time we tried to access your microphone. Now we will record it.');\n        return;\n      }\n    }\n\n    if (audioEl.current) {\n      audioEl.current.muted = true;\n      audioEl.current.srcObject = microphone.current;\n    }\n\n    const options = {\n      type: 'audio',\n      numberOfAudioChannels: 2,\n      checkForInactiveTracks: true,\n      bufferSize: 16384,\n      recorderType: StereoAudioRecorder,\n    };\n\n    // if (isSafari) {\n    //   options.recorderType = StereoAudioRecorder;\n    // }\n\n    if (recorder.current) {\n      recorder.current.destroy();\n      recorder.current = null;\n    }\n\n    recorder.current = RecordRTC(microphone.current, options);\n    // recorder.startRecording();\n\n    console.log(recorder.current);\n\n    if (!recording) {\n      setRecording(true);\n    }\n  };\n  const stopRec = (e: React.MouseEvent) => {\n    e.preventDefault();\n\n    if (recording) {\n      setRecording(false);\n    }\n  }\n\n  useEffect(() => {\n    console.log(`useEffect recording: ${recording}`);\n    console.log(`useEffect microphone: ${microphone.current}`);\n    console.log(`useEffect recorder: ${recorder.current}`);\n    // レコーディング開始\n    if (recording && microphone.current) {\n      console.log('start recording');\n\n      if (recorder.current) {\n        recorder.current.startRecording();\n      }\n    } else if (!recording && microphone.current && recorder.current && recorder.current.state === 'recording') {\n      console.log('stop recording');\n\n      if (recorder.current) {\n        recorder.current.stopRecording(() => {\n          console.log(\"STOP Recording callback\");\n          if (resultEl.current && recorder.current) {\n            const url = URL.createObjectURL(recorder.current.getBlob());\n            console.log(url);\n            resultEl.current.src = url;\n            console.log(\"resultEl is ready to play\");\n          }\n        });\n\n        // console.log(\"recorder is destoying\");\n        // recorder.current.destroy();\n        // recorder.current = null;\n      }\n    } else {\n      console.log('something wrong');\n    }\n  }, [recording, microphone, recorder]);\n\n  // useEffect(() => {\n  //   if (isSafari) {\n  //     alert('create AudioContext instance');\n  //     const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n  //     console.log(audioContext);\n\n  //     let scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);\n  //     localScriptProcessor = scriptProcessor;\n\n  //     if (audioContext.createMediaStreamDestination) {\n  //       destinationNode = audioContext.createMediaStreamDestination()\n  //     }\n  //     else {\n  //       destinationNode = audioContext.destination\n  //     }\n  //   }\n\n  //   alert('finished creating audioContext instance');\n  // })\n\n  useEffect(() => {\n    if (typeof navigator !== 'undefined' && typeof navigator.getUserMedia === 'undefined') { // maybe window.navigator?\n      if (typeof (navigator as any).webkitGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = (navigator as any).webkitGetUserMedia;\n      }\n\n      if (typeof (navigator as any).mozGetUserMedia !== 'undefined') {\n        navigator.getUserMedia = (navigator as any).mozGetUserMedia;\n      }\n    }\n\n    alert(`navigator.getUserMedia: ${navigator.getUserMedia}`);\n  }, []);\n\n  console.log(`This browser is Safari or not: ${isSafari}`);\n\n  return (\n    <Container>\n      <Control>\n        <Button name=\"start\" value=\"START\" onClick={startRec} />\n        <Button name=\"stop\" value=\"STOP\" onClick={stopRec} />\n      </Control>\n      <div>\n        <Audio ref={audioEl} controls></Audio>\n        <Audio ref={resultEl} controls></Audio>\n      </div>\n    </Container>\n  );\n}\n\n// 本当は align-itemsで 中央寄せにできると思ったが、うまく行かなかったので\n// text-align: centerで代用\nconst Container = styled.div`\n  width: 80%;\n  height: 200px;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #f14c00;\n  margin: 0 auto;\n  padding: 20px;\n  text-align: center;\n  border-radius: 4px;\n`;\n\nconst Control = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst Audio = styled.audio`\n  width: 80%;\n  margin: 10px 0;\n`;\n\nconst Button = styled.input.attrs({ type: 'button' })`\n  width: 30%;\n  height: 30px;\n  background-color: #fff;\n  border-radius: 12px;\n`;","import React from 'react';\nimport { UserMediaDevices } from '../components/UserMediaDevices';\nimport { Recording } from '../components/Recording';\nimport { VoiceRecorder } from '../components/VoiceRecorder';\n\nexport const Samples: React.FC = () => {\n  // const [clickedReactMic, setClickedReactMid] = useState(false);\n  // const handleClick = (e: React.MouseEvent) => {\n  //   e.preventDefault();\n  //   setClickedReactMid(true);\n  //   console.log(\"clicked\");\n  // };\n\n  return (\n    <div>\n      <div>\n        <UserMediaDevices />\n      </div>\n      <div>\n        <h2>1. cleandersonlobo/react-mic</h2>\n        <Recording />\n        {/* {!clickedReactMic ? (\n          <button onClick={(e) => handleClick(e)}>\n            start recording\n          </button>\n        ) : (\n          <button onClick={() => setClickedReactMid(false)}>\n            stop\n          </button>\n        )} */}\n      </div>\n      <div>\n        <h2>VoiceRecorder</h2>\n        <VoiceRecorder />\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { Top } from '../../pages/Top';\nimport { Samples } from '../../pages/Samples';\n// うまく動かない\n// import { GithubRouter } from './GithubRouter';\n\nexport const AppRouter: React.FC = () => {\n  // const prefix = \"/react-audio-recorder\";\n  // const prefix = \"\";\n      // <Switch>\n      //   <Route exact path={`${prefix}/`}>\n      //     <Route path={`${prefix}/top`} />\n      //   </Route>\n      //   <Route exact path={`${prefix}/top`} component={Top} />\n      //   <Route exact path={`${prefix}/samples`} component={Samples} />\n      //   <Route path={'*'}>\n      //     <Redirect to=\"/top\" />\n      //   </Route>\n      // </Switch>\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={'/'}>\n          <Redirect to={'/top'} />\n        </Route>\n        <Route exact path={'/top'} component={Top} />\n        <Route exact path={'/samples'} component={Samples} />\n        <Route path={'*'}>\n          <Redirect to=\"/top\" />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}","import React from 'react';\nimport { AppRouter } from './components/Router/router';\nimport './App.css';\n\nfunction App() {\n  return (\n    <AppRouter />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}